import cv2
import csv
import os
import tkinter as tk
from tkinter import filedialog, messagebox
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import matplotlib
matplotlib.use("TkAgg")
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from PIL import Image, ImageTk
import threading

# ─── CONFIG ─────────────────────────────────────────────
SCALE_MM_PER_PX = 0.04904
TEMPLATE_HALF   = 12
MATCH_METHOD    = cv2.TM_CCOEFF
FONT            = cv2.FONT_HERSHEY_SIMPLEX
MARGIN_HEIGHT   = 40
ALERT_WARN      = 0.75
ALERT_CRIT      = 1.00
REF_X           = 251
CROP_X, CROP_Y, CROP_W, CROP_H = 400, 1, 75, 600
LIVE_WINDOW     = 300
UPDATE_EVERY    = 5

class VideoAnalyzerApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Video Analyzer with Live Monitoring")
        self.running = False

        # Layout frames
        self.canvas_frame = tk.Frame(master)
        self.canvas_frame.pack(side="top", fill="both", expand=True)
        self.video_frame = tk.Label(master)
        self.video_frame.pack(side="top", fill="both", expand=True)

        # Buttons
        self.button_frame = tk.Frame(master)
        self.button_frame.pack(side="bottom", fill="x")
        self.start_btn = tk.Button(self.button_frame, text="Start", command=self.start)
        self.stop_btn = tk.Button(self.button_frame, text="Stop", command=self.stop, state="disabled")
        self.start_btn.pack(side="left", expand=True)
        self.stop_btn.pack(side="right", expand=True)

        # Matplotlib chart
        self.fig, self.ax = plt.subplots(figsize=(6, 3))
        self.line, = self.ax.plot([], [], lw=2, color="royalblue")
        self.ax.set_ylim(-1, 12)
        self.ax.set_xlim(0, LIVE_WINDOW)
        self.ax.set_xlabel("Frame")
        self.ax.set_ylabel("Deviation (mm)")
        self.ax.yaxis.set_major_locator(mticker.MultipleLocator(1.0))
        self.ax.yaxis.set_minor_locator(mticker.MultipleLocator(0.1))
        self.ax.grid(which="both", alpha=0.3)
        self.fig.tight_layout()
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.canvas_frame)
        self.canvas.get_tk_widget().pack(fill="both", expand=True)

    def start(self):
        self.running = True
        self.start_btn.config(state="disabled")
        self.stop_btn.config(state="normal")
        threading.Thread(target=self.process_video).start()

    def stop(self):
        self.running = False

    def process_video(self):
        video_path = filedialog.askopenfilename(title="Select input video",
                                                filetypes=[("Video files", "*.mp4 *.mov *.avi")])
        if not video_path:
            return

        base = os.path.splitext(os.path.basename(video_path))[0] + "_output"
        out_dir = os.path.dirname(video_path)
        out_video = os.path.join(out_dir, base + ".mp4")
        csv_path = os.path.join(out_dir, base + ".csv")
        html_path = os.path.join(out_dir, base + ".html")

        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            messagebox.showerror("Error", "Cannot open video.")
            return
        fps = cap.get(cv2.CAP_PROP_FPS)
        cap.set(cv2.CAP_PROP_POS_MSEC, 1000)
        ok, frame = cap.read()
        if not ok:
            messagebox.showerror("Error", "Cannot read reference frame.")
            return

        roi = frame[CROP_Y:CROP_Y+CROP_H, CROP_X:CROP_X+CROP_W]
        ref_rot = cv2.rotate(roi, cv2.ROTATE_90_CLOCKWISE)
        rot_h, rot_w = ref_rot.shape[:2]
        x1, x2 = max(0, REF_X - TEMPLATE_HALF), min(rot_w - 1, REF_X + TEMPLATE_HALF)
        template = cv2.cvtColor(ref_rot[:, x1:x2], cv2.COLOR_BGR2GRAY)

        writer = cv2.VideoWriter(out_video, cv2.VideoWriter_fourcc(*"mp4v"), fps, (rot_w, rot_h + MARGIN_HEIGHT))

        frames, raw_mm = [], []
        prev_dev = None
        idx = 0
        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)

        while self.running:
            ok, frame = cap.read()
            if not ok:
                break
            idx += 1
            timestamp = idx / fps

            roi = frame[CROP_Y:CROP_Y+CROP_H, CROP_X:CROP_X+CROP_W]
            roi_rot = cv2.rotate(roi, cv2.ROTATE_90_CLOCKWISE)
            gray = cv2.cvtColor(roi_rot, cv2.COLOR_BGR2GRAY)
            _, _, _, loc = cv2.minMaxLoc(cv2.matchTemplate(gray, template, MATCH_METHOD))
            best_x = loc[0] + TEMPLATE_HALF
            dev_mm = (best_x - REF_X) * SCALE_MM_PER_PX
            vel_mm_s = 0.0 if prev_dev is None else (dev_mm - prev_dev) * fps
            prev_dev = dev_mm

            frames.append(idx)
            raw_mm.append(dev_mm)

            cv2.line(roi_rot, (REF_X, 0), (REF_X, rot_h), (0, 0, 255), 2)
            cv2.line(roi_rot, (best_x, 0), (best_x, rot_h), (0, 255, 0), 1)

            if abs(dev_mm) >= ALERT_CRIT:
                bg = np.full((MARGIN_HEIGHT, rot_w, 3), (60, 60, 255), np.uint8)
            elif abs(dev_mm) >= ALERT_WARN:
                bg = np.full((MARGIN_HEIGHT, rot_w, 3), (0, 255, 255), np.uint8)
            else:
                bg = np.full((MARGIN_HEIGHT, rot_w, 3), 245, np.uint8)

            arrow = "↑" if vel_mm_s > 0.01 else ("↓" if vel_mm_s < -0.01 else "→")
            text = f"Frame: {idx:<6d}  Time: {timestamp:6.2f}s  Δ: {dev_mm:+.2f} mm  {vel_mm_s:+.2f} mm/s {arrow}"
            cv2.putText(bg, text, (10, 28), FONT, 0.65, (255, 255, 255), 2, cv2.LINE_AA)

            framed = np.vstack((bg, roi_rot))
            writer.write(framed)

            if idx % UPDATE_EVERY == 0:
                w_x = frames[-LIVE_WINDOW:]
                w_y = raw_mm[-LIVE_WINDOW:]
                self.line.set_data(w_x, w_y)
                self.ax.set_xlim(max(0, w_x[0]), w_x[-1] + 1)
                self.canvas.draw_idle()

                rgb = cv2.cvtColor(framed, cv2.COLOR_BGR2RGB)
                img = ImageTk.PhotoImage(Image.fromarray(rgb))
                self.video_frame.configure(image=img)
                self.video_frame.image = img

        cap.release()
        writer.release()

        smoothed = pd.Series(raw_mm).rolling(7, center=True).mean()
        with open(csv_path, "w", newline="") as f:
            w = csv.writer(f)
            w.writerow(["Frame", "Dev_mm_raw", "Dev_mm_smooth"])
            for fr, r, s in zip(frames, raw_mm, smoothed):
                w.writerow([fr, f"{r:.3f}", f"{s:.3f}" if not pd.isna(s) else ""])

        fig_report = go.Figure()
        fig_report.add_trace(go.Scatter(x=frames, y=raw_mm,
            mode="lines", name="Raw", line=dict(color="rgba(0,100,255,.3)", dash="dot")))
        fig_report.add_trace(go.Scatter(x=frames, y=smoothed,
            mode="lines+markers", name="Smoothed", line=dict(color="red")))
        fig_report.update_layout(title="Deviation of 70 mm Tick",
            xaxis_title="Frame", yaxis_title="Deviation (mm)",
            plot_bgcolor="rgb(245,245,245)", hovermode="x unified", height=500)
        fig_report.write_html(html_path)

        messagebox.showinfo("Done", f"Saved to:\n{out_video}\n{csv_path}\n{html_path}")
        self.start_btn.config(state="normal")
        self.stop_btn.config(state="disabled")

if __name__ == "__main__":
    root = tk.Tk()
    app = VideoAnalyzerApp(root)
    root.mainloop()
